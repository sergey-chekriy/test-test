
// run ganache locally with the following command and leave terminal window open, and run script (this file) in another terminal window:
// terminal 1>ganache-cli --account="0x0670559f1384d63515ca4a433e17e9b00e91de7615da040719de39a7139a11ba,100000000000000000000" --account="0x9ccb8579243c6fad3ebccaf5a990e5fa8f56f8f34e7c45db8a191586cb85a903,100000000000000000000" --account="0xd343a508a76d511222c76d10ac3c500f9aa36795f1cfd12454939ca176004b88,100000000000000000000" --account="0x3b5ca1527b422b1230978a0018c30d26773f689d9ff9c6d91ac7d2e713267582,100000000000000000000" --account="0x9f82d19e7267ae36ab4c2649f923464c4ac5643fed506c74b3ccddb44abfbc1e,100000000000000000000" --account="0x11b55a6a116516f027a2f0078f7961aa5d8ab0130debc34639766cb4c7c50f9c,100000000000000000000" --account="0x4a6177f095081d427e0a4dd8a3c93badff6f70cb776c4756761c442e89551117,100000000000000000000" --account="0xce67e77c6b1c4a581c1a06da2aff9531fed8001fb4ebe36ad9b9a60aa9a94ad0,100000000000000000000" --account="0xad730bdc3a8c50982525c1b9c3ad369c2a3d7b359a60302b2c60754f772002bf,100000000000000000000" --account="0xbf50fc70182e9c99338751a8f54a0504504cc496486504abef339d53f3e51335,100000000000000000000" --secure -u 0 -u 1 -u 2 -u 3 -u 4 -u 6 -u 7 -u 8 -u 9 --gasLimit 50000000 --gasPrice 5000 -b 1
// terminal 2>node test.js
//
const { ethers } = require("ethers");
const fs = require('fs');

const provider = new ethers.providers.JsonRpcProvider('http://127.0.0.1:8545'); //ganache 



const ADJ_CONSTANT = 1000000000000000000; //10**18

const token_contract_abi = [{"inputs":[{"internalType":"address","name":"creator_","type":"address"},{"internalType":"string","name":"name_","type":"string"},{"internalType":"string","name":"symbol_","type":"string"},{"internalType":"uint256","name":"supply_","type":"uint256"},{"internalType":"uint8","name":"decimals_","type":"uint8"}],"payable":false,"stateMutability":"nonpayable","type":"constructor"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"owner","type":"address"},{"indexed":true,"internalType":"address","name":"spender","type":"address"},{"indexed":false,"internalType":"uint256","name":"value","type":"uint256"}],"name":"Approval","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"from","type":"address"},{"indexed":true,"internalType":"address","name":"to","type":"address"},{"indexed":false,"internalType":"uint256","name":"value","type":"uint256"}],"name":"Transfer","type":"event"},{"constant":true,"inputs":[{"internalType":"address","name":"owner","type":"address"},{"internalType":"address","name":"spender","type":"address"}],"name":"allowance","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[{"internalType":"address","name":"spender","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"approve","outputs":[{"internalType":"bool","name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[{"internalType":"address","name":"account","type":"address"}],"name":"balanceOf","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"decimals","outputs":[{"internalType":"uint8","name":"","type":"uint8"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[{"internalType":"address","name":"spender","type":"address"},{"internalType":"uint256","name":"subtractedValue","type":"uint256"}],"name":"decreaseAllowance","outputs":[{"internalType":"bool","name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":false,"inputs":[{"internalType":"address","name":"spender","type":"address"},{"internalType":"uint256","name":"addedValue","type":"uint256"}],"name":"increaseAllowance","outputs":[{"internalType":"bool","name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[],"name":"name","outputs":[{"internalType":"string","name":"","type":"string"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"symbol","outputs":[{"internalType":"string","name":"","type":"string"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"totalSupply","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[{"internalType":"address","name":"recipient","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"transfer","outputs":[{"internalType":"bool","name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":false,"inputs":[{"internalType":"address","name":"sender","type":"address"},{"internalType":"address","name":"recipient","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"transferFrom","outputs":[{"internalType":"bool","name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}];
const token_contract_bytecode = '60806040523480156200001157600080fd5b5060405162000dc938038062000dc9833981810160405260a08110156200003757600080fd5b8151602083018051604051929492938301929190846401000000008211156200005f57600080fd5b9083019060208201858111156200007557600080fd5b82516401000000008111828201881017156200009057600080fd5b82525081516020918201929091019080838360005b83811015620000bf578181015183820152602001620000a5565b50505050905090810190601f168015620000ed5780820380516001836020036101000a031916815260200191505b50604052602001805160405193929190846401000000008211156200011157600080fd5b9083019060208201858111156200012757600080fd5b82516401000000008111828201881017156200014257600080fd5b82525081516020918201929091019080838360005b838110156200017157818101518382015260200162000157565b50505050905090810190601f1680156200019f5780820380516001836020036101000a031916815260200191505b506040908152602082810151929091015186519294509250620001c89160039187019062000376565b508251620001de90600490602086019062000376565b50620001f485836001600160e01b036200021316565b6005805460ff191660ff92909216919091179055506200041b92505050565b6001600160a01b0382166200026f576040805162461bcd60e51b815260206004820152601f60248201527f45524332303a206d696e7420746f20746865207a65726f206164647265737300604482015290519081900360640190fd5b6200028b816002546200031460201b620008071790919060201c565b6002556001600160a01b03821660009081526020818152604090912054620002be9183906200080762000314821b17901c565b6001600160a01b0383166000818152602081815260408083209490945583518581529351929391927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9281900390910190a35050565b6000828201838110156200036f576040805162461bcd60e51b815260206004820152601b60248201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604482015290519081900360640190fd5b9392505050565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f10620003b957805160ff1916838001178555620003e9565b82800160010185558215620003e9579182015b82811115620003e9578251825591602001919060010190620003cc565b50620003f7929150620003fb565b5090565b6200041891905b80821115620003f7576000815560010162000402565b90565b61099e806200042b6000396000f3fe608060405234801561001057600080fd5b50600436106100a95760003560e01c8063395093511161007157806339509351146101d957806370a082311461020557806395d89b411461022b578063a457c2d714610233578063a9059cbb1461025f578063dd62ed3e1461028b576100a9565b806306fdde03146100ae578063095ea7b31461012b57806318160ddd1461016b57806323b872dd14610185578063313ce567146101bb575b600080fd5b6100b66102b9565b6040805160208082528351818301528351919283929083019185019080838360005b838110156100f05781810151838201526020016100d8565b50505050905090810190601f16801561011d5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b6101576004803603604081101561014157600080fd5b506001600160a01b03813516906020013561034f565b604080519115158252519081900360200190f35b610173610365565b60408051918252519081900360200190f35b6101576004803603606081101561019b57600080fd5b506001600160a01b0381358116916020810135909116906040013561036b565b6101c36103da565b6040805160ff9092168252519081900360200190f35b610157600480360360408110156101ef57600080fd5b506001600160a01b0381351690602001356103e3565b6101736004803603602081101561021b57600080fd5b50356001600160a01b031661041f565b6100b661043a565b6101576004803603604081101561024957600080fd5b506001600160a01b03813516906020013561049b565b6101576004803603604081101561027557600080fd5b506001600160a01b0381351690602001356104f0565b610173600480360360408110156102a157600080fd5b506001600160a01b03813581169160200135166104fd565b60038054604080516020601f60026000196101006001881615020190951694909404938401819004810282018101909252828152606093909290918301828280156103455780601f1061031a57610100808354040283529160200191610345565b820191906000526020600020905b81548152906001019060200180831161032857829003601f168201915b5050505050905090565b600061035c338484610528565b50600192915050565b60025490565b6000610378848484610614565b6103d084336103cb856040518060600160405280602881526020016108d4602891396001600160a01b038a166000908152600160209081526040808320338452909152902054919063ffffffff61077016565b610528565b5060019392505050565b60055460ff1690565b3360008181526001602090815260408083206001600160a01b0387168452909152812054909161035c9185906103cb908663ffffffff61080716565b6001600160a01b031660009081526020819052604090205490565b60048054604080516020601f60026000196101006001881615020190951694909404938401819004810282018101909252828152606093909290918301828280156103455780601f1061031a57610100808354040283529160200191610345565b600061035c33846103cb85604051806060016040528060258152602001610945602591393360009081526001602090815260408083206001600160a01b038d168452909152902054919063ffffffff61077016565b600061035c338484610614565b6001600160a01b03918216600090815260016020908152604080832093909416825291909152205490565b6001600160a01b03831661056d5760405162461bcd60e51b81526004018080602001828103825260248152602001806109216024913960400191505060405180910390fd5b6001600160a01b0382166105b25760405162461bcd60e51b815260040180806020018281038252602281526020018061088c6022913960400191505060405180910390fd5b6001600160a01b03808416600081815260016020908152604080832094871680845294825291829020859055815185815291517f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9259281900390910190a3505050565b6001600160a01b0383166106595760405162461bcd60e51b81526004018080602001828103825260258152602001806108fc6025913960400191505060405180910390fd5b6001600160a01b03821661069e5760405162461bcd60e51b81526004018080602001828103825260238152602001806108696023913960400191505060405180910390fd5b6106e1816040518060600160405280602681526020016108ae602691396001600160a01b038616600090815260208190526040902054919063ffffffff61077016565b6001600160a01b038085166000908152602081905260408082209390935590841681522054610716908263ffffffff61080716565b6001600160a01b038084166000818152602081815260409182902094909455805185815290519193928716927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef92918290030190a3505050565b600081848411156107ff5760405162461bcd60e51b81526004018080602001828103825283818151815260200191508051906020019080838360005b838110156107c45781810151838201526020016107ac565b50505050905090810190601f1680156107f15780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b505050900390565b600082820183811015610861576040805162461bcd60e51b815260206004820152601b60248201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604482015290519081900360640190fd5b939250505056fe45524332303a207472616e7366657220746f20746865207a65726f206164647265737345524332303a20617070726f766520746f20746865207a65726f206164647265737345524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e636545524332303a207472616e7366657220616d6f756e74206578636565647320616c6c6f77616e636545524332303a207472616e736665722066726f6d20746865207a65726f206164647265737345524332303a20617070726f76652066726f6d20746865207a65726f206164647265737345524332303a2064656372656173656420616c6c6f77616e63652062656c6f77207a65726fa265627a7a72315820f6c2189a5ec6223c2c466b7d777bb0bf2edb8c2ba403a58108a297315a196a4664736f6c63430005110032';



let bank_source = fs.readFileSync("./contracts/contracts.json");
let bank_contract = JSON.parse(bank_source)["contracts"]['contracts/test.sol:StakingContract'];


const bank_protocol_abi = bank_contract.abi;//[{"inputs":[{"internalType":"address","name":"existingVaultContractAddress","type":"address"}],"stateMutability":"nonpayable","type":"constructor"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"previousOwner","type":"address"},{"indexed":true,"internalType":"address","name":"newOwner","type":"address"}],"name":"OwnershipTransferred","type":"event"},{"inputs":[],"name":"CANNOT_TRANSFER_TO_ZERO_ADDRESS","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"NOT_CURRENT_OWNER","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"tokenAddress","type":"address"},{"internalType":"address","name":"priceProvider","type":"address"},{"internalType":"uint256","name":"valuationPercent","type":"uint256"},{"internalType":"uint256","name":"apr","type":"uint256"}],"name":"addReplaceCreditProfile","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint32","name":"id","type":"uint32"},{"internalType":"address","name":"token","type":"address"},{"internalType":"uint256","name":"apy","type":"uint256"},{"internalType":"uint256","name":"minLockTime","type":"uint256"},{"internalType":"bool","name":"canJoin","type":"bool"},{"internalType":"uint256","name":"dpEndDate","type":"uint256"}],"name":"addReplaceDepositProfile","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"userWallet","type":"address"},{"internalType":"uint32","name":"profileId","type":"uint32"}],"name":"amountForUserDeposit","outputs":[{"internalType":"uint256","name":"depositAmount","type":"uint256"},{"internalType":"uint256","name":"depositExtractableAmount","type":"uint256"},{"internalType":"uint256","name":"usdDepositAmount","type":"uint256"},{"internalType":"uint256","name":"usdDepositExtractableAmount","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"contractDay","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"contractIsActive","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"customer","type":"address"},{"internalType":"address","name":"creditToken","type":"address"},{"internalType":"uint32","name":"collateralDepProfileId","type":"uint32"}],"name":"creditFee","outputs":[{"internalType":"uint256","name":"fee","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"","type":"address"}],"name":"creditProfiles","outputs":[{"internalType":"address","name":"priceProvider","type":"address"},{"internalType":"uint256","name":"valuationPercent","type":"uint256"},{"internalType":"uint256","name":"apr","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"","type":"address"}],"name":"customerExists","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"","type":"address"},{"internalType":"address","name":"","type":"address"},{"internalType":"uint32","name":"","type":"uint32"}],"name":"customersCredits","outputs":[{"internalType":"uint256","name":"collateralAmount","type":"uint256"},{"internalType":"uint256","name":"creditAmount","type":"uint256"},{"internalType":"uint256","name":"creditDate","type":"uint256"},{"internalType":"uint256","name":"accumulatedFee","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"","type":"address"},{"internalType":"uint32","name":"","type":"uint32"}],"name":"customersDeposits","outputs":[{"internalType":"uint256","name":"depositAmount","type":"uint256"},{"internalType":"uint256","name":"depositDate","type":"uint256"},{"internalType":"uint256","name":"accumulatedReward","type":"uint256"},{"internalType":"bool","name":"implyLock","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"customersNumber","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"","type":"uint256"}],"name":"customersRegister","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"amount","type":"uint256"},{"internalType":"uint32","name":"profileId","type":"uint32"}],"name":"deposit","outputs":[],"stateMutability":"payable","type":"function"},{"inputs":[{"internalType":"address","name":"userWallet","type":"address"},{"internalType":"uint32","name":"profileId","type":"uint32"}],"name":"depositDays","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"userWallet","type":"address"},{"internalType":"uint32","name":"profileId","type":"uint32"}],"name":"depositIsExtractable","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint32","name":"","type":"uint32"}],"name":"depositProfiles","outputs":[{"internalType":"address","name":"token","type":"address"},{"internalType":"uint256","name":"apy","type":"uint256"},{"internalType":"uint256","name":"minLockTime","type":"uint256"},{"internalType":"bool","name":"canJoin","type":"bool"},{"internalType":"uint256","name":"endDate","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"depositProfilesLength","outputs":[{"internalType":"uint32","name":"","type":"uint32"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"userWallet","type":"address"},{"internalType":"uint32","name":"profileId","type":"uint32"}],"name":"depositReward","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"endDate","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"collateralToken","type":"address"},{"internalType":"uint256","name":"credAmount","type":"uint256"},{"internalType":"address","name":"creditToken","type":"address"}],"name":"estimateCollateralForCredit","outputs":[{"internalType":"uint256","name":"collateralTokens","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"collateralToken","type":"address"},{"internalType":"uint256","name":"collateralAmount","type":"uint256"},{"internalType":"address","name":"creditToken","type":"address"}],"name":"estimateCreditForCollateral","outputs":[{"internalType":"uint256","name":"creditTokens","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint32","name":"depProfileId","type":"uint32"},{"internalType":"uint256","name":"creditAmount","type":"uint256"},{"internalType":"address","name":"creditToken","type":"address"},{"internalType":"bool","name":"whole","type":"bool"}],"name":"getCredit","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"tokenValue","type":"uint256"},{"internalType":"address","name":"token","type":"address"}],"name":"getUsdValue","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"ownAddress","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"owner","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"ownerWithdrawEtherToVaultContract","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"tokenAddress","type":"address"},{"internalType":"uint256","name":"realAmountTokens","type":"uint256"}],"name":"ownerWithdrawTokensToVaultContract","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"pauseContract","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"customer","type":"address"},{"internalType":"address","name":"creditToken","type":"address"},{"internalType":"uint32","name":"collateralDepProfileId","type":"uint32"},{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"returnCredit","outputs":[],"stateMutability":"payable","type":"function"},{"inputs":[{"internalType":"address","name":"customer","type":"address"},{"internalType":"address","name":"creditToken","type":"address"},{"internalType":"uint32","name":"collateralDepProfileId","type":"uint32"},{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"returnFee","outputs":[],"stateMutability":"payable","type":"function"},{"inputs":[{"internalType":"address","name":"userWallet","type":"address"},{"internalType":"uint32","name":"profileId","type":"uint32"}],"name":"rewardForUserDeposit","outputs":[{"internalType":"uint256","name":"rewardForDeposit","type":"uint256"},{"internalType":"uint256","name":"extractableRewardForDeposit","type":"uint256"},{"internalType":"uint256","name":"usdRewardForDeposit","type":"uint256"},{"internalType":"uint256","name":"extractableUsdRewardForDeposit","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"period","type":"uint256"}],"name":"setContractDay","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint32","name":"newLen","type":"uint32"}],"name":"setDepositProfilesLength","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"newEndDate","type":"uint256"}],"name":"setEndDate","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"newVaultContractAddress","type":"address"}],"name":"setVaultContractAddress","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"startContract","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"usdValue","type":"uint256"},{"internalType":"address","name":"token","type":"address"}],"name":"tokensFromUSDValue","outputs":[{"internalType":"uint256","name":"est_tokens","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"_newOwner","type":"address"}],"name":"transferOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"vaultContractAddress","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint32","name":"profileId","type":"uint32"},{"internalType":"uint256","name":"withdrawAmount","type":"uint256"},{"internalType":"bool","name":"whole","type":"bool"}],"name":"withdrawDepositById","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint32","name":"profileId","type":"uint32"}],"name":"withdrawDepositRewardById","outputs":[],"stateMutability":"nonpayable","type":"function"},{"stateMutability":"payable","type":"receive"}];
const bank_protocol_bytecode = bank_contract.bin;//'0x608060405261012c6003556005805463ffffffff191690556000600955600c80546001600160a01b03191690556200003c4263039ada00620000b1565b600d553480156200004c57600080fd5b506040516200367a3803806200367a8339810160408190526200006f91620000d8565b600080546001600160a01b0319908116331790915560018054821630178155600255600c80546001600160a01b0393909316929091169190911790556200010a565b60008219821115620000d357634e487b7160e01b600052601160045260246000fd5b500190565b600060208284031215620000eb57600080fd5b81516001600160a01b03811681146200010357600080fd5b9392505050565b613560806200011a6000396000f3fe6080604052600436106102605760003560e01c80638a020c3811610144578063cfaf1f53116100b6578063ef634de81161007a578063ef634de814610881578063f2fde38b146108a1578063f3fe3bc3146108c1578063f7655ab4146108f3578063fadcef2014610913578063fff37fe51461098557600080fd5b8063cfaf1f53146107ae578063d0b5af43146107ce578063e2991c43146107ee578063e2d4cacf1461080e578063e7d900c41461086157600080fd5b80639b15f731116101085780639b15f731146106f9578063a92ea0e01461072f578063b003602e1461074f578063c0174f9014610762578063c24a0f8b14610782578063c85a19611461079857600080fd5b80638a020c38146105ea5780638a38ef4e1461060a5780638da5cb5b1461062a578063947383bc1461064a578063960f74d41461066a57600080fd5b806346487064116101dd578063689b0098116101a1578063689b0098146104db5780636902fc061461050b578063701456bc1461053d5780637140730e14610575578063860d248a1461058b578063871105cc146105ca57600080fd5b806346487064146104465780634e3c1fe4146104665780635fb02f4d146104865780636689f3d81461049b57806368894acf146104bb57600080fd5b80632b2dfd2c116102245780632b2dfd2c1461037357806331c3fbff146103865780633784f000146103a6578063439766ce146103c657806345171f26146103db57600080fd5b806308323c69146102a35780630d60ea19146102d65780630ff7b8a4146103005780631479ba7e1461032057806318130fbd1461033357600080fd5b3661029e57341561029c5760405162461bcd60e51b81526020600482015260016024820152600760fb1b60448201526064015b60405180910390fd5b005b600080fd5b3480156102af57600080fd5b506102c36102be366004612fe6565b6109a5565b6040519081526020015b60405180910390f35b3480156102e257600080fd5b50600e546102f09060ff1681565b60405190151581526020016102cd565b34801561030c57600080fd5b5061029c61031b366004613026565b6109eb565b61029c61032e366004613041565b610c84565b34801561033f57600080fd5b5061035361034e36600461308c565b610ff9565b6040805194855260208501939093529183015260608201526080016102cd565b61029c6103813660046130b6565b61111a565b34801561039257600080fd5b5061029c6103a13660046130e7565b6113ab565b3480156103b257600080fd5b5061029c6103c1366004613136565b6114a6565b3480156103d257600080fd5b5061029c6114b3565b3480156103e757600080fd5b506104216103f636600461314f565b6006602052600090815260409020805460018201546002909201546001600160a01b03909116919083565b604080516001600160a01b0390941684526020840192909252908201526060016102cd565b34801561045257600080fd5b506102c361046136600461316a565b6114c7565b34801561047257600080fd5b5061035361048136600461308c565b611524565b34801561049257600080fd5b5061029c611616565b3480156104a757600080fd5b506102c36104b636600461308c565b61162d565b3480156104c757600080fd5b5061029c6104d6366004613136565b6116ed565b3480156104e757600080fd5b506102f06104f636600461314f565b60076020526000908152604090205460ff1681565b34801561051757600080fd5b506005546105289063ffffffff1681565b60405163ffffffff90911681526020016102cd565b34801561054957600080fd5b5060015461055d906001600160a01b031681565b6040516001600160a01b0390911681526020016102cd565b34801561058157600080fd5b506102c360095481565b34801561059757600080fd5b506105bd6040518060400160405280600681526020016518189c18181960d11b81525081565b6040516102cd91906131a6565b3480156105d657600080fd5b5061029c6105e536600461314f565b6116fa565b3480156105f657600080fd5b506102c361060536600461308c565b611724565b34801561061657600080fd5b5061029c6106253660046131fb565b6117d4565b34801561063657600080fd5b5060005461055d906001600160a01b031681565b34801561065657600080fd5b506102c361066536600461316a565b611925565b34801561067657600080fd5b506106c5610685366004613026565b6004602081905260009182526040909120805460018201546002830154600384015493909401546001600160a01b03909216939092909160ff9091169085565b604080516001600160a01b03909616865260208601949094529284019190915215156060830152608082015260a0016102cd565b34801561070557600080fd5b5061055d610714366004613136565b6008602052600090815260409020546001600160a01b031681565b34801561073b57600080fd5b50600c5461055d906001600160a01b031681565b61029c61075d366004613041565b611978565b34801561076e57600080fd5b5061029c61077d366004613225565b611d28565b34801561078e57600080fd5b506102c3600d5481565b3480156107a457600080fd5b506102c360035481565b3480156107ba57600080fd5b506102c36107c9366004613267565b611d89565b3480156107da57600080fd5b5061029c6107e9366004613026565b611e9f565b3480156107fa57600080fd5b5061029c6108093660046132a1565b611ec3565b34801561081a57600080fd5b50610353610829366004613267565b600b60209081526000938452604080852082529284528284209052825290208054600182015460028301546003909301549192909184565b34801561086d57600080fd5b5061029c61087c366004613304565b611feb565b34801561088d57600080fd5b5061029c61089c366004613136565b612387565b3480156108ad57600080fd5b5061029c6108bc36600461314f565b612449565b3480156108cd57600080fd5b506105bd6040518060400160405280600681526020016530313830303160d01b81525081565b3480156108ff57600080fd5b506102c361090e366004612fe6565b6124f1565b34801561091f57600080fd5b5061096361092e36600461308c565b600a60209081526000928352604080842090915290825290208054600182015460028301546003909301549192909160ff1684565b60408051948552602085019390935291830152151560608201526080016102cd565b34801561099157600080fd5b506102f06109a036600461308c565b6125ba565b6000806109bc69021e19e0c9bab2400000846124f1565b905060006109d48569021e19e0c9bab240000061335a565b90506109e08282613379565b925050505b92915050565b6109f3612687565b600e5460ff16610a155760405162461bcd60e51b81526004016102939061339b565b60008163ffffffff16118015610a37575060055463ffffffff90811690821611155b610a535760405162461bcd60e51b8152600401610293906133b7565b336000818152600a6020908152604080832063ffffffff86168452909152902060010154610a935760405162461bcd60e51b8152600401610293906133d3565b610a9d81836125ba565b610ace5760405162461bcd60e51b8152602060048201526002602482015261189960f11b6044820152606401610293565b6000610ada828461162d565b905080600003610ae957505050565b63ffffffff831660009081526004602081905260408083205460015491516370a0823160e01b81526001600160a01b039283169381019390935216919082906370a0823190602401602060405180830381865afa158015610b4e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b7291906133ef565b905082811015610b945760405162461bcd60e51b815260040161029390613408565b60405163a9059cbb60e01b81526001600160a01b0385811660048301526024820185905283169063a9059cbb906044016020604051808303816000875af1925050508015610bff575060408051601f3d908101601f19168201909252610bfc91810190613424565b60015b610c1b5760405162461bcd60e51b815260040161029390613441565b80610c385760405162461bcd60e51b815260040161029390613441565b506001600160a01b0384166000908152600a6020908152604080832063ffffffff8916845290915281204260018201556002810191909155600301805460ff191690555b505050505b50565b610c8c612687565b6001600160a01b0384163314610cc95760405162461bcd60e51b8152602060048201526002602482015261363360f01b6044820152606401610293565b600e5460ff16610ceb5760405162461bcd60e51b81526004016102939061339b565b60008263ffffffff16118015610d0d575060055463ffffffff90811690831611155b610d295760405162461bcd60e51b8152600401610293906133b7565b63ffffffff82166000908152600460205260409020546001600160a01b03808516911603610d695760405162461bcd60e51b81526004016102939061345c565b336000908152600a6020908152604080832063ffffffff86168452909152902060010154610da95760405162461bcd60e51b8152600401610293906133d3565b6001600160a01b038085166000908152600b60209081526040808320938716835292815282822063ffffffff8616835290522060020154610e115760405162461bcd60e51b8152602060048201526002602482015261313160f01b6044820152606401610293565b6001600160a01b038085166000908152600b60209081526040808320938716835292815282822063ffffffff86168352905220600101548015610e7b5760405162461bcd60e51b81526020600482015260026024820152611b1960f11b6044820152606401610293565b6001600160a01b038086166000908152600b60209081526040808320938816835292815282822063ffffffff8716835290522060030154828114610ee65760405162461bcd60e51b8152602060048201526002602482015261363160f01b6044820152606401610293565b6001600160a01b03851615610f8e576001546040516323b872dd60e01b81523360048201526001600160a01b0391821660248201526044810185905286918216906323b872dd906064016020604051808303816000875af1925050508015610f6b575060408051601f3d908101601f19168201909252610f6891810190613424565b60015b610f875760405162461bcd60e51b815260040161029390613441565b5050610fad565b823414610fad5760405162461bcd60e51b815260040161029390613441565b6001600160a01b038087166000908152600b60209081526040808320938916835292815282822063ffffffff88168352905290812060030155610ff18686866126a1565b505050505050565b6001600160a01b0382166000908152600a6020908152604080832063ffffffff85168452909152812060010154819081908190158061103c575063ffffffff8516155b80611052575060055463ffffffff908116908616115b1561106857506000925082915081905080611111565b6001600160a01b0386166000908152600a6020908152604080832063ffffffff8916845290915281205461109c88886125ba565b156110a9578091506110ae565b600091505b63ffffffff8716600090815260046020526040902054819083906110dc9083906001600160a01b03166124f1565b63ffffffff8a166000908152600460205260409020546111069089906001600160a01b03166124f1565b955095509550955050505b92959194509250565b611122612687565b600e5460ff166111445760405162461bcd60e51b81526004016102939061339b565b60008163ffffffff16118015611166575060055463ffffffff90811690821611155b6111825760405162461bcd60e51b8152600401610293906133b7565b63ffffffff81166000908152600460208190526040909120805460018201546002830154600384015493909401546001600160a01b03909216939092909160ff90911690428111806111d2575080155b6112035760405162461bcd60e51b8152602060048201526002602482015261199960f11b6044820152606401610293565b8315158061121057508215155b6112405760405162461bcd60e51b81526020600482015260016024820152600d60fa1b6044820152606401610293565b816112715760405162461bcd60e51b81526020600482015260016024820152603960f81b6044820152606401610293565b6001600160a01b03851615611336576001546040516323b872dd60e01b81523360048201526001600160a01b0391821660248201526044810189905286918216906323b872dd906064016020604051808303816000875af19250505080156112f6575060408051601f3d908101601f191682019092526112f391810190613424565b60015b6113125760405162461bcd60e51b815260040161029390613441565b8061132f5760405162461bcd60e51b815260040161029390613441565b505061136a565b86341461136a5760405162461bcd60e51b8152602060048201526002602482015261189b60f11b6044820152606401610293565b6040805160808101825288815242602082015260009181019190915260016060820152611398338289612791565b6113a1336128c9565b5050505050505050565b6113b3612687565b600e5460ff166113d55760405162461bcd60e51b81526004016102939061339b565b60008463ffffffff161180156113f7575060055463ffffffff90811690851611155b6114135760405162461bcd60e51b8152600401610293906133b7565b63ffffffff84166000908152600460205260409020546001600160a01b038084169116036114535760405162461bcd60e51b81526004016102939061345c565b336000908152600a6020908152604080832063ffffffff881684529091529020600101546114935760405162461bcd60e51b8152600401610293906133d3565b6114a03385858585612929565b50505050565b6114ae612b6d565b600d55565b6114bb612b6d565b600e805460ff19169055565b6001600160a01b0383166000908152600660205260408120600101546114ed908461335a565b92506114fc620186a084613379565b9250600061150a84866124f1565b9050600061151882856109a5565b925050505b9392505050565b6001600160a01b0382166000908152600a6020908152604080832063ffffffff851684529091528120600101548190819081901580611567575063ffffffff8516155b8061157d575060055463ffffffff908116908616115b1561159357506000925082915081905080611111565b6000806115a0888861162d565b90506115ac88886125ba565b156115b9578091506115be565b600091505b63ffffffff8716600090815260046020526040902054819083906115ec9083906001600160a01b03166124f1565b63ffffffff8a166000908152600460205260409020546111069086906001600160a01b03166124f1565b61161e612b6d565b600e805460ff19166001179055565b600063ffffffff8216158061164d575060055463ffffffff908116908316115b1561165a575060006109e5565b6001600160a01b0383166000908152600a6020908152604080832063ffffffff8616845290915281208054600290910154909182900361169d5791506109e59050565b6001600160a01b0385166000908152600a6020908152604080832063ffffffff88168452909152812060010154906116d6868386612bb6565b90506116e28382613478565b979650505050505050565b6116f5612b6d565b600355565b611702612b6d565b600c80546001600160a01b0319166001600160a01b0392909216919091179055565b6001600160a01b0382166000908152600a6020908152604080832063ffffffff851684529091528120600101541580611761575063ffffffff8216155b80611777575060055463ffffffff908116908316115b15611784575060006109e5565b6003546001600160a01b0384166000908152600a6020908152604080832063ffffffff871684529091528120600101549091906117c19042613490565b6117cb9190613379565b91506109e59050565b6117dc612b6d565b6001546040516370a0823160e01b81526001600160a01b0391821660048201528391600091908316906370a0823190602401602060405180830381865afa15801561182b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061184f91906133ef565b90508260000361185d578092505b8281101561187d5760405162461bcd60e51b815260040161029390613441565b600c5460405163a9059cbb60e01b81526001600160a01b039182166004820152602481018590529083169063a9059cbb906044016020604051808303816000875af19250505080156118ec575060408051601f3d908101601f191682019092526118e991810190613424565b60015b6119085760405162461bcd60e51b815260040161029390613441565b80610c7c5760405162461bcd60e51b815260040161029390613441565b60008061193284846124f1565b9050600061194082876109a5565b905061194f620186a08261335a565b6001600160a01b0387166000908152600660205260409020600101549091506115189082613379565b611980612687565b6001600160a01b03841633146119bd5760405162461bcd60e51b8152602060048201526002602482015261363360f01b6044820152606401610293565b600e5460ff166119df5760405162461bcd60e51b81526004016102939061339b565b60008263ffffffff16118015611a01575060055463ffffffff90811690831611155b611a1d5760405162461bcd60e51b8152600401610293906133b7565b63ffffffff82166000908152600460205260409020546001600160a01b03808516911603611a5d5760405162461bcd60e51b81526004016102939061345c565b336000908152600a6020908152604080832063ffffffff86168452909152902060010154611a9d5760405162461bcd60e51b8152600401610293906133d3565b6001600160a01b038085166000908152600b60209081526040808320938716835292815282822063ffffffff8616835290522060020154611b055760405162461bcd60e51b8152602060048201526002602482015261313160f01b6044820152606401610293565b6001600160a01b038085166000908152600b60209081526040808320938716835292815282822063ffffffff861683529052206001015481811015611b715760405162461bcd60e51b8152602060048201526002602482015261363560f01b6044820152606401610293565b6001600160a01b03841615611c19576001546040516323b872dd60e01b81523360048201526001600160a01b0391821660248201526044810184905285918216906323b872dd906064016020604051808303816000875af1925050508015611bf6575060408051601f3d908101601f19168201909252611bf391810190613424565b60015b611c125760405162461bcd60e51b815260040161029390613441565b5050611c38565b813414611c385760405162461bcd60e51b815260040161029390613441565b611c43858585611d89565b6001600160a01b038681166000908152600b60209081526040808320938916835292815282822063ffffffff881683529052908120600381019290925560019091018054849290611c95908490613490565b90915550506001600160a01b038581166000908152600b60209081526040808320938816835292815282822063ffffffff8716835290522042600282015560030154158015611d1857506001600160a01b038086166000908152600b60209081526040808320938816835292815282822063ffffffff8716835290522060010154155b15610c7c57610c7c8585856126a1565b611d30612b6d565b604080516060810182526001600160a01b0394851681526020808201948552818301938452958516600090815260069096529420935184546001600160a01b031916931692909217835551600183015551600290910155565b6001600160a01b038084166000908152600b60209081526040808320938616835292815282822063ffffffff85168352905290812060020154808203611dd357600091505061151d565b600354600090611de38342613490565b611ded9190613379565b6001600160a01b038088166000908152600b60209081526040808320938a1680845293825280832063ffffffff8a16845282528083206001810154600390910154948452600690925282206002015493945090929091908215611e87578461016d620186a0611e5c868561335a565b611e669190613379565b611e709190613379565b611e7a919061335a565b611e849085613478565b93505b611e918285613478565b9a9950505050505050505050565b611ea7612b6d565b6005805463ffffffff191663ffffffff92909216919091179055565b611ecb612b6d565b60008663ffffffff1611611ef15760405162461bcd60e51b8152600401610293906133b7565b801580611f095750611f064262015180613478565b81115b611f255760405162461bcd60e51b8152600401610293906133b7565b600d541580611f4257506000600d54118015611f425750600d5481105b611f5e5760405162461bcd60e51b8152600401610293906133b7565b6040805160a0810182526001600160a01b0396871681526020808201968752818301958652931515606082019081526080820193845263ffffffff98909816600090815260049485905291909120905181546001600160a01b03191696169590951785559251600185015590516002840155925160038301805460ff191691151591909117905551910155565b611ff3612687565b600e5460ff166120155760405162461bcd60e51b81526004016102939061339b565b60008363ffffffff16118015612037575060055463ffffffff90811690841611155b6120535760405162461bcd60e51b8152600401610293906133b7565b336000818152600a6020908152604080832063ffffffff881684529091529020600101546120935760405162461bcd60e51b8152600401610293906133d3565b61209d81856125ba565b6120ce5760405162461bcd60e51b8152602060048201526002602482015261189960f11b6044820152606401610293565b6000821561210657506001600160a01b0381166000908152600a6020908152604080832063ffffffff88168452909152902054612109565b50825b80600003612118575050505050565b6001600160a01b0382166000908152600a6020908152604080832063ffffffff891684529091529020548111156121615760405162461bcd60e51b815260040161029390613408565b6001600160a01b0382166000908152600a6020908152604080832063ffffffff89168452909152812054612196908390613490565b63ffffffff871660009081526004602081905260408083205460015491516370a0823160e01b81526001600160a01b03928316938101939093529394509092169182906370a0823190602401602060405180830381865afa1580156121ff573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061222391906133ef565b9050838110156122455760405162461bcd60e51b815260040161029390613408565b60405163a9059cbb60e01b81526001600160a01b0386811660048301526024820186905283169063a9059cbb906044016020604051808303816000875af19250505080156122b0575060408051601f3d908101601f191682019092526122ad91810190613424565b60015b6122cc5760405162461bcd60e51b815260040161029390613441565b806122e95760405162461bcd60e51b815260040161029390613441565b506122f4858961162d565b6001600160a01b0386166000908152600a6020908152604080832063ffffffff8d1684529091528120600281019290925590849055600190849003612337575060005b6001600160a01b03959095166000908152600a6020908152604080832063ffffffff9b909b16835299905297909720426001820155600301805460ff191694151594909417909355505050505050565b61238f612b6d565b6001546001600160a01b0316318111156123bb5760405162461bcd60e51b815260040161029390613408565b600c546040516000916001600160a01b03169083908381818185875af1925050503d8060008114612408576040519150601f19603f3d011682016040523d82523d6000602084013e61240d565b606091505b505080915050806124455760405162461bcd60e51b8152602060048201526002602482015261313560f01b6044820152606401610293565b5050565b612451612b6d565b60408051808201909152600681526518189c18181960d11b60208201526001600160a01b0382166124955760405162461bcd60e51b815260040161029391906131a6565b50600080546040516001600160a01b03808516939216917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a3600080546001600160a01b0319166001600160a01b0392909216919091179055565b600082600003612503575060006109e5565b6001600160a01b03808316600090815260066020526040808220548151633fabe5a360e21b81529151931692839291839163feaf968c9160048082019260a0929091908290030181865afa15801561255f573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061258391906134c1565b509193508392506000915061259a9050828961335a565b90506125ae670de0b6b3a764000082613379565b98975050505050505050565b6001600160a01b0382166000908152600a6020908152604080832063ffffffff8516845290915281206003015460ff16151581036125fa575060016109e5565b63ffffffff82161580612618575060055463ffffffff908116908316115b15612625575060006109e5565b63ffffffff82166000818152600460209081526040808320600201546001600160a01b0388168452600a83528184209484529390915290206001015461266c908290613478565b42101561267d5760009150506109e5565b5060019392505050565b60016002600082825461269a9190613478565b9091555050565b6126ab838261162d565b6001600160a01b038481166000818152600a6020908152604080832063ffffffff88168085528184528285206002810198909855948452600b8352818420958916845294825280832093835292815291812054929091528254919291612712908490613478565b90915550506001600160a01b039283166000818152600a6020908152604080832063ffffffff95909516808452948252808320426001808301919091556003918201805460ff19169055948452600b83528184209690971683529481528482209382529290925291812081815560028101829055918201819055910155565b6001600160a01b0383166000908152600a6020908152604080832063ffffffff8516845290915290206001015415806128695760006127d0858461162d565b6001600160a01b0386166000908152600a6020908152604080832063ffffffff881684529091528120600281018390558651815493945092909190612816908490613478565b9091555050506001600160a01b0384166000908152600a6020908152604080832063ffffffff86168452909152902042600182015560608401516003909101805460ff19169115159190911790556114a0565b506001600160a01b03929092166000908152600a6020908152604080832063ffffffff9590951683529381529083902082518155908201516001820155918101516002830155606001516003909101805460ff1916911515919091179055565b6001600160a01b03811660009081526007602052604090205460ff16610c815760098054600090815260086020526040812080546001600160a01b0319166001600160a01b0385161790558154919061292183613511565b919050555050565b821580156129345750805b806129485750600083118015612948575080155b6129795760405162461bcd60e51b8152602060048201526002602482015261343960f01b6044820152606401610293565b6001600160a01b0385166000908152600a6020908152604080832063ffffffff88168452909152902054806129d55760405162461bcd60e51b8152602060048201526002602482015261068760f31b6044820152606401610293565b60008215612a115763ffffffff8616600090815260046020526040902054612a07906001600160a01b031683866114c7565b9450819050612a3e565b63ffffffff8616600090815260046020526040902054612a3b906001600160a01b03168686611925565b90505b60008111612a735760405162461bcd60e51b8152602060048201526002602482015261035360f41b6044820152606401610293565b80821015612aa85760405162461bcd60e51b8152602060048201526002602482015261064760f31b6044820152606401610293565b6000604051806080016040528083815260200187815260200142815260200160008152509050612ada8882878a612c70565b6000612ae68385613490565b9050612af2898961162d565b6001600160a01b038a166000908152600a6020908152604080832063ffffffff8d16845290915290206002810191909155818155426001820155600301805460ff1916821515179055612b46898888612e03565b612b625760405162461bcd60e51b815260040161029390613441565b505050505050505050565b60005460408051808201909152600681526530313830303160d01b6020820152906001600160a01b03163314610c815760405162461bcd60e51b815260040161029391906131a6565b600d54600090429015612bd257600d54421115612bd25750600d545b63ffffffff8516600090815260046020819052604090912060018101549101548015612c045780831115612c04578092505b600086841115612c2857600354612c1b8886613490565b612c259190613379565b90505b6000612c34878561335a565b9050612c43620186a082613379565b90506000612c5361016d83613379565b90506000612c61848361335a565b9b9a5050505050505050505050565b6001600160a01b038085166000908152600b60209081526040808320938616835292815282822063ffffffff85168352905220600201541580612da7576000612cba868585611d89565b6001600160a01b038781166000908152600b60209081526040808320938916835292815282822063ffffffff8816835281529181206003810184905591880151600190920180549394509192612d11908490613478565b909155505084516001600160a01b038088166000908152600b60209081526040808320938916835292815282822063ffffffff8816835290529081208054909190612d5d908490613478565b9091555050506040808501516001600160a01b038088166000908152600b6020908152848220928816825291825283812063ffffffff871682529091529190912060020155610c7c565b506001600160a01b039384166000908152600b6020908152604080832094909616825292835284812063ffffffff9290921681529082528390208251815590820151600182015591810151600283015560600151600390910155565b60006001600160a01b03821615612f40576001546040516370a0823160e01b81526001600160a01b0391821660048201528391600091908316906370a0823190602401602060405180830381865afa158015612e63573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612e8791906133ef565b905084811015612ea95760405162461bcd60e51b815260040161029390613408565b60405163a9059cbb60e01b81526001600160a01b0387811660048301526024820187905283169063a9059cbb906044016020604051808303816000875af1925050508015612f14575060408051601f3d908101601f19168201909252612f1191810190613424565b60015b612f235760009250505061151d565b80612f34576000935050505061151d565b5060019250505061151d565b6001546001600160a01b031631831115612f6c5760405162461bcd60e51b815260040161029390613408565b6000846001600160a01b03168460405160006040518083038185875af1925050503d8060008114612fb9576040519150601f19603f3d011682016040523d82523d6000602084013e612fbe565b606091505b5090925061151d915050565b80356001600160a01b0381168114612fe157600080fd5b919050565b60008060408385031215612ff957600080fd5b8235915061300960208401612fca565b90509250929050565b803563ffffffff81168114612fe157600080fd5b60006020828403121561303857600080fd5b61151d82613012565b6000806000806080858703121561305757600080fd5b61306085612fca565b935061306e60208601612fca565b925061307c60408601613012565b9396929550929360600135925050565b6000806040838503121561309f57600080fd5b6130a883612fca565b915061300960208401613012565b600080604083850312156130c957600080fd5b8235915061300960208401613012565b8015158114610c8157600080fd5b600080600080608085870312156130fd57600080fd5b61310685613012565b93506020850135925061311b60408601612fca565b9150606085013561312b816130d9565b939692955090935050565b60006020828403121561314857600080fd5b5035919050565b60006020828403121561316157600080fd5b61151d82612fca565b60008060006060848603121561317f57600080fd5b61318884612fca565b92506020840135915061319d60408501612fca565b90509250925092565b600060208083528351808285015260005b818110156131d3578581018301518582016040015282016131b7565b818111156131e5576000604083870101525b50601f01601f1916929092016040019392505050565b6000806040838503121561320e57600080fd5b61321783612fca565b946020939093013593505050565b6000806000806080858703121561323b57600080fd5b61324485612fca565b935061325260208601612fca565b93969395505050506040820135916060013590565b60008060006060848603121561327c57600080fd5b61328584612fca565b925061329360208501612fca565b915061319d60408501613012565b60008060008060008060c087890312156132ba57600080fd5b6132c387613012565b95506132d160208801612fca565b9450604087013593506060870135925060808701356132ef816130d9565b8092505060a087013590509295509295509295565b60008060006060848603121561331957600080fd5b61332284613012565b9250602084013591506040840135613339816130d9565b809150509250925092565b634e487b7160e01b600052601160045260246000fd5b600081600019048311821515161561337457613374613344565b500290565b60008261339657634e487b7160e01b600052601260045260246000fd5b500490565b602080825260029082015261353160f01b604082015260600190565b602080825260029082015261333160f01b604082015260600190565b602080825260029082015261031360f41b604082015260600190565b60006020828403121561340157600080fd5b5051919050565b602080825260029082015261313360f01b604082015260600190565b60006020828403121561343657600080fd5b815161151d816130d9565b6020808252600190820152603360f81b604082015260600190565b6020808252600290820152610d0d60f21b604082015260600190565b6000821982111561348b5761348b613344565b500190565b6000828210156134a2576134a2613344565b500390565b805169ffffffffffffffffffff81168114612fe157600080fd5b600080600080600060a086880312156134d957600080fd5b6134e2866134a7565b9450602086015193506040860151925060608601519150613505608087016134a7565b90509295509295909350565b60006001820161352357613523613344565b506001019056fea26469706673582212207ae5082ca7b606e91f647d09267892eb23581f5e4eb81d17e6ac3648d2df364064736f6c634300080d0033';


let token_contract,  bank_protocol;

let block;

testall();



let sleep = ms => new Promise(resolve => setTimeout(resolve, ms));



async function approveTokens(user_wallet_addr, user_wallet, token_contract, to_address){
	let total_supply = await token_contract.totalSupply();

	let allow = await token_contract.allowance(user_wallet_addr,to_address);
            
	
    if (allow.toString() == total_supply.toString()) return;
      

  const user_token_rw = new ethers.Contract(token_contract.address, token_contract_abi, user_wallet);
	
	let tx = await user_token_rw.approve(to_address,total_supply.toString(), {
                              
                                              gasPrice: ethers.getDefaultProvider().getGasPrice(),
                                              gasLimit: block.gasLimit
                                            }); 
  	await tx.wait();


}


async function verifyApproval(t_contract, user_wallet_addr, bank_protocol_addr){
	let total_supply = await t_contract.totalSupply();

	let allow = await t_contract.allowance(user_wallet_addr,bank_protocol_addr);
            
	
    if (allow.toString() == total_supply.toString()){ 
    	return true;
    } else {
    	return false;
    }
     

}



async function printUserBalance(user_name, user_wallet_addr, t_contract){
	console.log(user_name, 'token: ', ethers.utils.formatEther( await t_contract.balanceOf(user_wallet_addr) )  );

}

async function verifyUserBalance(user_wallet_addr, t_contract) {
	if (ethers.utils.formatEther( await t_contract.balanceOf(user_wallet_addr) ) >= 5000 ){
		return true;
	} else {
		return false;
	}
	
}


async function stakeTokens(num, profileId ,stake_contract){
 


    let tx = await stake_contract.deposit(ethers.BigNumber.from(num),profileId, {
                              
                                              gasPrice: ethers.getDefaultProvider().getGasPrice(),
                                              gasLimit: block.gasLimit
                                            }); 
    await tx.wait();
}


async function withdrawDeposit(stake_contract, depositId, withdrawAmount, whole){

	try {
	
		let tx = await stake_contract.withdrawDepositById(depositId, withdrawAmount, whole,{
                              
                                              gasPrice: ethers.getDefaultProvider().getGasPrice(),
                                              gasLimit: block.gasLimit
                                            }); 
		await tx.wait();
	} catch(e){

		console.log(e.message);
	}
}


async function withdrawDepositReward(stake_contract, depositId){

	try {
		let tx = await stake_contract.withdrawDepositRewardById(depositId,{
                              
                                              gasPrice: ethers.getDefaultProvider().getGasPrice(),
                                              gasLimit: block.gasLimit
                                            }); 
		await tx.wait();
	} catch(e){

		console.log(e.message);
	}

}

async function outputDeposits(user_wallet_addr,stake_contract){ 

     
	  //let numDeposits = parseInt(await stake_contract.numberOfUserDeposits(user_wallet_addr));    
	  //console.log('# deposits:', numDeposits); 
      
      for (let i = 1; i <= 6; i++){ //profile id
      	
      	let dep = await stake_contract.amountForUserDeposit(user_wallet_addr, i);
      	let rew = await stake_contract.rewardForUserDeposit(user_wallet_addr, i);
      	
      	
      	console.log('deposit  profile #:'+i.toString());
      	console.log('deposit amount: '  + ethers.utils.formatEther(dep.depositAmount));
      	let usd_bn = ethers.BigNumber.from(dep.usdDepositAmount); 
      	usd_bn = usd_bn.mul(ethers.BigNumber.from('10000000000'));
      	console.log('USD deposit amount: '  + ethers.utils.formatEther(usd_bn));
      	console.log('extractable deposit amount: '  + ethers.utils.formatEther(dep.depositExtractableAmount));
      	console.log('deposit reward: '  + ethers.utils.formatEther(rew.rewardForDeposit));
      	usd_bn = ethers.BigNumber.from(rew.usdRewardForDeposit); 
      	usd_bn = usd_bn.mul(ethers.BigNumber.from('10000000000'));	
      	console.log('USD reward amount: '  + ethers.utils.formatEther(usd_bn));
      	console.log('extractable reward amount: '  + ethers.utils.formatEther(rew.extractableRewardForDeposit));
      	
      }

}

async function outputDepositProfiles(stake_contract){ 

     
	  let numProfiles = parseInt(await stake_contract.depositProfilesLength());     
	  console.log('numProfiles=', numProfiles);
      
      for (let i = 1; i <= numProfiles; i++){
      	
      	let depProfile = await stake_contract.depositProfiles(i);
      	
      	
      	console.log('deposit profile id #'+i.toString());
      	console.log('token: ' + depProfile.token);
      	
      	console.log('apy: ' + depProfile.apy);
      	console.log('minLockTime: ' + depProfile.minLockTime);
      	console.log('canJoin: ' + depProfile.canJoin);
      	console.log('dpEndDate: ' + depProfile.dpEndDate);
      	
      }

}

async function outputCreditProfiles(stake_contract){ 

     
	
      	
      	let credProfile = await stake_contract.creditProfiles(token_contract.address);
      	
      	
      	console.log('token: ', token_contract.address);
      	console.log('price provider: ' + credProfile.priceProvider);
      	
      	console.log('valuation percent: ' + credProfile.valuationPercent);

      	console.log('apr: ' + credProfile.apr);

      	credProfile = await stake_contract.creditProfiles(token_contract2.address);
      	
      	
      	console.log('token :', token_contract2.address);
      	console.log('price provider: ' + credProfile.priceProvider);
      	
      	console.log('valuation percent: ' + credProfile.valuationPercent);

      	console.log('apr: ' + credProfile.apr);
      	
      

}


async function verifyDeposit(user_wallet_addr,stake_contract, amount, id){ 
	 
     let dep;
	 
      try {	
      	dep = await stake_contract.amountForUserDeposit(user_wallet_addr, id, { gasPrice: ethers.getDefaultProvider().getGasPrice(), gasLimit: block.gasLimit});
      	//console.log('dep=',dep);
      } catch(e){
      	console.log(e.message);
      	process.exit(0);
      }
      	
      if (ethers.utils.formatEther(dep.depositAmount) == amount){
      	return true;
      } else {
      	return false;
      }
      	
}







async function verifyWithdrawDeposits(user_wallet_addr,stake_contract){ 

     
	 /* let numDeposits;	
      try {
	  	numDeposits = parseInt(await stake_contract.numberOfUserDeposits(user_wallet_addr));   
	  	if (numDeposits != 6){
	  		console.log('error, numDeposits=', numDeposits);
	  		return false; 	
	  	} 
	  } catch {
	  	return false;
	  }*/

	 
      
      for (let i = 1; i <= 6; i++){//for each profile id
      	
      	
      	let dep = await stake_contract.amountForUserDeposit(user_wallet_addr, i);

      	if (dep.depositAmount.toString() == '0') continue;

      	let rew = await stake_contract.rewardForUserDeposit(user_wallet_addr, i);
      	let dep_days = await stake_contract.depositDays(user_wallet_addr, i);
      	let contract_day = await stake_contract.contractDay(); 

      	let dep_profile = await stake_contract.depositProfiles(i);
     
  		let lock_time = parseInt( dep_profile.minLockTime.toString() );
  		let dep_time = parseInt( (dep_days.mul(contract_day)).toString() );

  		
  		
  		if (lock_time < dep_time){
  			
  			
  			try {
				await withdrawDeposit(stake_contract, i, 0, true);
				
			} catch {

				console.log('withdrawDeposit err, profileId=',i);
				return false; //incorrect 
				 			
			}

			try {
				await withdrawDepositReward(stake_contract, i);
				
			} catch {
				console.log('withdrawDepositReward err, profileId=',i);
				return false; //incorrect			
			}

			

  		}	
      	
      }

      return true;

     

}

async function testall(){

	block = await provider.getBlock("latest");
	console.log('gas block limit=', block.gasLimit.toString());

	const accounts = await provider.listAccounts();

	console.log('test accounts');
	console.log(accounts);

	console.log('1st account is contract deployer');
	console.log('2-4 accounts are test users');


	let admin_wallet = provider.getSigner(0);
	const admin_wallet_addr = accounts[0];


	let user1_wallet = provider.getSigner(1);
	const user1_wallet_addr = accounts[1];

	let user2_wallet = provider.getSigner(2);
	const user2_wallet_addr = accounts[2];

	let user3_wallet = provider.getSigner(3)
	const user3_wallet_addr = accounts[3];

	

	


	
	
	console.log('/* 1.deploy token contract */');

	try {
	    let contract_factory = new ethers.ContractFactory(token_contract_abi, token_contract_bytecode, admin_wallet);
	  
	    token_contract = await contract_factory.deploy(admin_wallet_addr, 'ZZZ', 'ZZZ', '1000000000000000000000000', 18);
	  	
	  	
	    await token_contract.deployTransaction.wait(); //after that it is deployed;
	
	    console.log ('token address1=',token_contract.address);
	  
	}  catch (e) {

		console.log('== 1.deploy token contract - failed ==');
		process.exit(0);
	}

	 


	console.log('== 1.deploy token contract - passed ==');
  	

	
	
	
	console.log('/* 3.deploy bank protocol contract */');

	

	try {
	    let contract_factory = new ethers.ContractFactory(bank_protocol_abi, bank_protocol_bytecode, admin_wallet);

	    bank_protocol = await contract_factory.deploy();

	    await bank_protocol.deployTransaction.wait(); //after that it is deployed;
	    console.log('bank_protocol address=',bank_protocol.address);

	}  catch (e) {

		console.log('== 1.deploy bank protocol contract - failed ==');
		console.log(e.message);
		process.exit(0);
	}

	 

	console.log('== 3.deploy bank protocol contract - passed ==');


	console.log('/* 4.configure bank protocol contract */');

	try {
		
		await bank_protocol.connect(admin_wallet).setRewardToken(token_contract.address); 

		await bank_protocol.connect(admin_wallet).setTimeBeforeYouCanDeposit( parseInt(Date.now()/1000) + 200 ); 
		await bank_protocol.connect(admin_wallet).setTimeWhenYouCanWithdraw( parseInt(Date.now()/1000) + 600 ); 

		await bank_protocol.connect(admin_wallet).setSharedRewardAmount( '1000000000000000000000'); //1000 tokens
		
		await token_contract.connect(admin_wallet).transfer(bank_protocol.address, '1500000000000000000000');

		
		if (! (await bank_protocol.rewardToken()).toString() == token_contract.address) throw('wrong token address');
		//and do on for all parameters
		
	} catch (e) {
		console.log('== 4.configure bank protocol contract - failed ==');
		console.log(e.message);
		process.exit(0);	
	}
  	console.log('== 4.configure bank protocol contract - passed ==');

 	console.log('/* and do on */');

  


 	console.log('=== all tests passed ===');	
 	process.exit(0);
}


